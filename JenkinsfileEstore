@Library('jenkins-rhapsody-libraries@master') _ //Importing shared Libraries
import com.rh.rhapsody.*;

Service s = Service.ESTORE_REGRESSION_TESTS;

CRON_SETTINGS = '''* * * * * % ENVIRONMENT=stg2;ENDPOINT=releasethurs''';


def resultspath = "${env.JOB_NAME}/${env.BUILD_NUMBER}"
println("resultspath=${resultspath}")

Java11Pipeline pipeline = new Java11Pipeline(this, s, env);


pipeline.standardTemplate { label ->
   properties([parameters([
         choice(choices: ['stg2', 'stg3', 'stg4', 'prod'], description: 'Select Environment to build', name: 'ENVIRONMENT'),
     choice(choices: ['releasetues', 'releasetues&FEATURE_SSR=true','releasethurs', 'releasethurs&FEATURE_SSR=true','contentfix', 'contentfix&FEATURE_SUPPRESS_UK=false', 'releasetues&FEATURE_SUPPRESS_UK=false', 'releasetues&FEATURE_SSR=true&FEATURE_SUPPRESS_UK=false','contentfix&FEATURE_SSR=true', 'poc&FEATURE_SSR=true', 'poc', 'FEATURE_SSR=true', 'cartcheckout', 'cartcheckout&FEATURE_SSR=true', 'rhr', 'rhr&FEATURE_SSR=true', 'intl', 'hotfix','userservice','userservice&FEATURE_SSR=true'], description: 'Select optional endpoint value', name: 'ENDPOINT'),
       choice(choices: ['US', 'GB', 'CA'], description: 'Select Country to build', name: 'COUNTRY')
     ])])
    node(label) {
        try {
            stage('checkout') {
                pipeline.checkoutCode();
                echo "Regression will be done on environment ${params.ENVIRONMENT}"
                echo "Regression will be done with cookie ${params.ENDPOINT}"
                environment "${params.ENVIRONMENT}"
            }

            stage('Run Tests') {
                pipeline.buildMvn("clean test -Dcucumber.filter.tags='@estoreRegression'", true);
            } // end stage

            container("awscli") {
                withAWS(region: "us-east-1", role: "devops-documentation", roleAccount: "487531406788") {
                    dir(s.rootDirectory) {
                        sh """
                        apk --no-cache add tree
                        pwd
                        cd /home/jenkins/workspace/${env.JOB_NAME}/target
                        tree -H '.' -L 3 --noreport --charset utf-8  -o index.html
                        aws s3 sync . s3://docs.rhapsody.rh.com/public/${resultspath}
                        """
                    } // pipeline dir
                }
            }  // pipeline/container

            slackSend(color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) 'Environment' (${params.ENVIRONMENT}) 'Endpoint' (${params.ENDPOINT})  " +
                    " : Test Results: http://docs.rhapsody.rh.com/public/${resultspath}/cucumber-html-report/Index.html",
                    channel: "#test-results")
        } catch (Exception exception) {
            notifyFailed()
            throw exception;
        }
    }
    // end Node
} // pipelineTemplate

def notifyFailed() {
    slackSend(color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "#test-results")
}