pipeline.standardTemplate { label ->
    properties([parameters([choice(choices: ['stg2', 'stg3', 'stg4', 'prod'], description: 'Select Environment to build', name: 'ENVIRONMENT'), choice(choices: ['releasetues', 'releasetues&FEATURE_SSR=true','contentfix', 'contentfix&FEATURE_SSR=true', 'releasethurs', 'releasethurs&FEATURE_SSR=true', 'poc&FEATURE_SSR=true', 'poc', 'FEATURE_SSR=true', 'cartcheckout', 'cartcheckout&FEATURE_SSR=true', 'rhr', 'rhr&FEATURE_SSR=true', 'intl', 'hotfix','userservice','userservice&FEATURE_SSR=true'], description: 'Select optional endpoint value', name: 'ENDPOINT')])])
    node(label) {
        try {
            stage('checkout') {
                pipeline.checkoutCode();
                echo "Regression will be done on environment ${params.ENVIRONMENT}"
                echo "Regression will be done with cookie ${params.ENDPOINT}"
                environment "${params.ENVIRONMENT}"
            }

            stage('Run Tests') {
                pipeline.buildMvn("sudo clean test -Dcucumber.filter.tags='@estoreRegression'", true);
            } // end stage

            slackSend(color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) 'Environment' (${params.ENVIRONMENT}) 'Endpoint' (${params.ENDPOINT})  " +
                    " : Test Results: http://docs.rhapsody.rh.com/public/${resultspath}/cucumber-html-report/Index.html",
                    channel: "#test-results")
        } catch (Exception exception) {
            notifyFailed()
            throw exception;
        }
    }
    // end Node
} // pipelineTemplate